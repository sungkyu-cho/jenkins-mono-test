pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE_FRONTEND = 'jenkins-mono-frontend'
        DOCKER_IMAGE_BACKEND = 'jenkins-mono-backend'
        DOCKER_IMAGE_DATABASE = 'jenkins-mono-database'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo '코드 체크아웃 중...'
                checkout scm
            }
        }
        
        stage('Frontend Build & Test') {
            steps {
                dir('frontend') {
                    echo '프론트엔드 빌드 및 테스트 중...'
                    sh 'npm install'
                    sh 'npm run lint'
                    sh 'npm run test'
                    sh 'npm run build'
                }
            }
        }
        
        stage('Backend Build & Test') {
            steps {
                dir('backend') {
                    echo '백엔드 빌드 및 테스트 중...'
                    sh './gradlew clean build'
                    sh './gradlew test'
                }
            }
        }
        
        stage('Database Build') {
            steps {
                dir('database') {
                    echo '데이터베이스 이미지 빌드 중...'
                    sh 'docker build -t ${DOCKER_IMAGE_DATABASE}:${DOCKER_TAG} .'
                }
            }
        }
        
        stage('Frontend Docker Build') {
            steps {
                dir('frontend') {
                    echo '프론트엔드 Docker 이미지 빌드 중...'
                    sh '''
                        cat > Dockerfile << 'EOF'
                        FROM node:18-alpine as build
                        WORKDIR /app
                        COPY package*.json ./
                        RUN npm ci --only=production
                        COPY . .
                        RUN npm run build
                        
                        FROM nginx:alpine
                        COPY --from=build /app/dist /usr/share/nginx/html
                        COPY nginx.conf /etc/nginx/nginx.conf
                        EXPOSE 80
                        CMD ["nginx", "-g", "daemon off;"]
                        EOF
                    '''
                    sh 'docker build -t ${DOCKER_IMAGE_FRONTEND}:${DOCKER_TAG} .'
                }
            }
        }
        
        stage('Backend Docker Build') {
            steps {
                dir('backend') {
                    echo '백엔드 Docker 이미지 빌드 중...'
                    sh '''
                        cat > Dockerfile << 'EOF'
                        FROM openjdk:17-jdk-slim
                        WORKDIR /app
                        COPY build/libs/app.jar app.jar
                        EXPOSE 8080
                        CMD ["java", "-jar", "app.jar"]
                        EOF
                    '''
                    sh 'docker build -t ${DOCKER_IMAGE_BACKEND}:${DOCKER_TAG} .'
                }
            }
        }
        
        stage('Integration Test') {
            steps {
                echo '통합 테스트 실행 중...'
                sh '''
                    docker-compose up -d database
                    sleep 30
                    docker-compose up -d backend
                    sleep 30
                    curl -f http://localhost:8080/api/health || exit 1
                    docker-compose down
                '''
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                echo '스테이징 환경에 배포 중...'
                sh 'docker-compose -f docker-compose.staging.yml up -d'
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo '프로덕션 환경에 배포 중...'
                sh 'docker-compose -f docker-compose.prod.yml up -d'
            }
        }
    }
    
    post {
        always {
            echo '빌드 완료 - 정리 작업 중...'
            sh 'docker system prune -f'
        }
        success {
            echo '빌드 성공!'
        }
        failure {
            echo '빌드 실패!'
        }
    }
} 