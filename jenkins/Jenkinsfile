pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE_FRONTEND = 'jenkins-mono-frontend'
        DOCKER_IMAGE_BACKEND = 'jenkins-mono-backend'
        DOCKER_IMAGE_DATABASE = 'jenkins-mono-database'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo '코드 체크아웃 중...'
                checkout scm
            }
        }
        
        stage('Frontend Build & Test') {
            steps {
                dir('frontend') {
                    echo '프론트엔드 빌드 및 테스트 중...'
                    bat 'npm install'
                    bat 'npm run lint'
                    bat 'npm run test'
                    bat 'npm run build'
                }
            }
        }
        
        stage('Backend Build & Test') {
            steps {
                dir('backend') {
                    echo '백엔드 빌드 및 테스트 중...'
                    bat 'set GRADLE_USER_HOME=C:\\gradle-home && gradlew.bat clean build'
                    bat 'set GRADLE_USER_HOME=C:\\gradle-home && gradlew.bat test'
                }
            }
        }
        
        stage('Database Build') {
            steps {
                dir('database') {
                    echo '데이터베이스 이미지 빌드 중...'
                    bat 'docker build -t %DOCKER_IMAGE_DATABASE%:%DOCKER_TAG% .'
                }
            }
        }
        
        stage('Frontend Docker Build') {
            steps {
                dir('frontend') {
                    echo '프론트엔드 Docker 이미지 빌드 중...'
                    bat '''
                        echo FROM node:18-alpine as build > Dockerfile
                        echo WORKDIR /app >> Dockerfile
                        echo COPY package*.json ./ >> Dockerfile
                        echo RUN npm ci --only=production >> Dockerfile
                        echo COPY . . >> Dockerfile
                        echo RUN npm run build >> Dockerfile
                        echo. >> Dockerfile
                        echo FROM nginx:alpine >> Dockerfile
                        echo COPY --from=build /app/dist /usr/share/nginx/html >> Dockerfile
                        echo COPY nginx.conf /etc/nginx/nginx.conf >> Dockerfile
                        echo EXPOSE 80 >> Dockerfile
                        echo CMD ["nginx", "-g", "daemon off;"] >> Dockerfile
                    '''
                    bat 'docker build -t %DOCKER_IMAGE_FRONTEND%:%DOCKER_TAG% .'
                }
            }
        }
        
        stage('Backend Docker Build') {
            steps {
                dir('backend') {
                    echo '백엔드 Docker 이미지 빌드 중...'
                    bat '''
                        echo FROM openjdk:22-jdk-slim > Dockerfile
                        echo WORKDIR /app >> Dockerfile
                        echo COPY build/libs/app.jar app.jar >> Dockerfile
                        echo EXPOSE 8080 >> Dockerfile
                        echo CMD ["java", "-jar", "app.jar"] >> Dockerfile
                    '''
                    bat 'docker build -t %DOCKER_IMAGE_BACKEND%:%DOCKER_TAG% .'
                }
            }
        }
        
        stage('Integration Test') {
            steps {
                echo '통합 테스트 실행 중...'
                bat '''
                    docker-compose up -d database
                    timeout /t 30 /nobreak
                    docker-compose up -d backend
                    timeout /t 30 /nobreak
                    curl -f http://localhost:8080/api/health || exit /b 1
                    docker-compose down
                '''
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                echo '스테이징 환경에 배포 중...'
                bat 'docker-compose -f docker-compose.staging.yml up -d'
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo '프로덕션 환경에 배포 중...'
                bat 'docker-compose -f docker-compose.prod.yml up -d'
            }
        }
    }
    
    post {
        always {
            echo '빌드 완료 - 정리 작업 중...'
            bat 'docker system prune -f'
        }
        success {
            echo '빌드 성공!'
        }
        failure {
            echo '빌드 실패!'
        }
    }
} 